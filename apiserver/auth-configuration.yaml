---
apiVersion: apiserver.config.k8s.io/v1beta1
kind: AuthenticationConfiguration
# list of authenticators to authenticate Kubernetes users using JWT compliant tokens.
# the maximum number of allowed authenticators is 64.
jwt:
  - issuer:
      # url must be unique across all authenticators.
      # url must not conflict with issuer configured in --service-account-issuer.
      url: https://accounts.google.com # Same as --oidc-issuer-url.
      # discoveryURL, if specified, overrides the URL used to fetch discovery
      # information instead of using "{url}/.well-known/openid-configuration".
      # The exact value specified is used, so "/.well-known/openid-configuration"
      # must be included in discoveryURL if needed.
      #
      # The "issuer" field in the fetched discovery information must match the "issuer.url" field
      # in the AuthenticationConfiguration and will be used to validate the "iss" claim in the presented JWT.
      # This is for scenarios where the well-known and jwks endpoints are hosted at a different
      # location than the issuer (such as locally in the cluster).
      # discoveryURL must be different from url if specified and must be unique across all authenticators.
      #discoveryURL: https://discovery.example.com/.well-known/openid-configuration
      # PEM encoded CA certificates used to validate the connection when fetching
      # discovery information. If not set, the system verifier will be used.
      # Same value as the content of the file referenced by the --oidc-ca-file flag.
      #certificateAuthority: <PEM encoded CA certificates>
      # audiences is the set of acceptable audiences the JWT must be issued to.
      # At least one of the entries must match the "aud" claim in presented JWTs.
      audiences:
        - 1050088916791-dj9v42fp35sm9o0fbkkh8tefbl056dgg.apps.googleusercontent.com
      # this is required to be set to "MatchAny" when multiple audiences are specified.
      audienceMatchPolicy: MatchAny
    # rules applied to validate token claims to authenticate users.
    claimValidationRules:
      # Same as --oidc-required-claim key=value.
      # - claim: hd
      #   requiredValue: example.com
        # Instead of claim and requiredValue, you can use expression to validate the claim.
        # expression is a CEL expression that evaluates to a boolean.
        # all the expressions must evaluate to true for validation to succeed.
      - expression: 'claims.hd == "narthollis.net"'
        # Message customizes the error message seen in the API server logs when the validation fails.
        message: the hd claim must be set to example.com
      - expression: "claims.exp - claims.iat <= 86400" # using iat insted of nbf as google tokens dont have nbf
        message: total token lifetime must not exceed 24 hours
    claimMappings:
      # username represents an option for the username attribute.
      # This is the only required attribute.
      username:
        # Same as --oidc-username-claim. Mutually exclusive with username.expression.
        claim: "email"
        # Same as --oidc-username-prefix. Mutually exclusive with username.expression.
        # if username.claim is set, username.prefix is required.
        # Explicitly set it to "" if no prefix is desired.
        prefix: "narthollis.net:"
        # Mutually exclusive with username.claim and username.prefix.
        # expression is a CEL expression that evaluates to a string.
        #
        # 1.  If username.expression uses 'claims.email', then 'claims.email_verified' must be used in
        #     username.expression or extra[*].valueExpression or claimValidationRules[*].expression.
        #     An example claim validation rule expression that matches the validation automatically
        #     applied when username.claim is set to 'email' is 'claims.?email_verified.orValue(true)'.
        # 2.  If the username asserted based on username.expression is the empty string, the authentication
        #     request will fail.
        #expression: 'claims.username + ":external-user"'
      # groups represents an option for the groups attribute.
      # groups:
      #   # Same as --oidc-groups-claim. Mutually exclusive with groups.expression.
      #   claim: "sub"
      #   # Same as --oidc-groups-prefix. Mutually exclusive with groups.expression.
      #   # if groups.claim is set, groups.prefix is required.
      #   # Explicitly set it to "" if no prefix is desired.
      #   prefix: ""
      #   # Mutually exclusive with groups.claim and groups.prefix.
      #   # expression is a CEL expression that evaluates to a string or a list of strings.
      #   expression: 'claims.roles.split(",")'
      # uid represents an option for the uid attribute.
      uid:
        # Mutually exclusive with uid.expression.
        claim: "sub"
        # Mutually exclusive with uid.claim
        # expression is a CEL expression that evaluates to a string.
        # expression: "claims.sub"
      # extra attributes to be added to the UserInfo object. Keys must be domain-prefix path and must be unique.
      # extra:
      #   - key: "example.com/tenant"
      #     # valueExpression is a CEL expression that evaluates to a string or a list of strings.
      #     valueExpression: "claims.tenant"
    # validation rules applied to the final user object.
    userValidationRules:
      # expression is a CEL expression that evaluates to a boolean.
      # all the expressions must evaluate to true for the user to be valid.
      - expression: "!user.username.startsWith('system:')"
        # Message customizes the error message seen in the API server logs when the validation fails.
        message: "username cannot used reserved system: prefix"
      - expression: "user.groups.all(group, !group.startsWith('system:'))"
        message: "groups cannot used reserved system: prefix"
